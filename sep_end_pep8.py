# # ---------------------------------------------------------------
# # Обучение на Python курс "Поколение Python": курс для начинающих
# # ---------------------------------------------------------------

# # -----------------------------
# # Sep, End
# # -----------------------------

# # По умолчанию команда print() принимает несколько аргументов, выводит их через один пробел, после чего ставит перевод строки. Это поведение можно изменить, используя необязательные именованные параметры sep и end

# # Как вы можете заметить, все строки выводятся с пробелом между друг другом – это неслучайное поведение. У команды print() есть параметр, который отвечает за разделение аргументов при выводе. Этот параметр называется sep (separator – разделитель). По умолчанию этот параметр равен символу пробела  . Следующие строки кода являются эквивалентными:

# print('aa', 'bb', 'cc', sep=' ')

# # Мы можем изменить параметр sep на любую другую строку, например, на символ звёздочки *.

# print('aa', 'bb', 'cc', sep='*')

# # Сейчас у нас аргументы разделены символом звёздочки *. Также в качестве параметра sep мы можем указать и переменную

# minus = '-'
# print('aa', 'bb', 'cc', sep=minus)

# # Каждого print() курсор переходит на новую строку. И это поведение тоже не является случайным, потому что у команды print() есть параметр end, определяющий, что нужно добавить в конец вывода. По умолчанию параметр end равен символу перевода строки (\n) Следующие строки кода являются эквивалентными:

# print("A great man doesn't seek to lead.", end='\n')
# print("He's called to it. And he answers.", end='\n')

# # Если перевод строки делать не нужно или требуется указать специальное окончание для вывода, то следует явно указать значение для параметра end (можем указать через переменную, как и с параметром sep)

# minus = '-'
# print('a', 'b', 'c', end=minus)
# print('second line')

# # По завершении печати первой команды print() вставлен символ - вместо символа перевода строки \n.

# # Примечание 1. Вызов команды print() с пустыми скобками делает перевод строки.

# # Примечание 2. Последовательность символов \n называется управляющей последовательностью и задаёт перевод строки.

# # Примечание 3. Параметры sep и end можно устанавливать одновременно.

# print('a', 'b', 'c', sep='*', end='finish')

# # Примечание 4. Для разных команд print() можно задавать разные параметры sep и end.

# arg1 = 'Hello'
# sep1 = '_-_'
# end2 = '+++'

# print(arg1, 'everyone', sep=sep1, end='!  ')
# print('How', 'are', 'you', 'in', '2024?', sep='  ', end=end2)

# # Примечание 5. Чтобы убрать все дополнительные выводимые символы, можно установить параметры sep и end команды print() как пустые строки ('').

# print('a', 'b', 'c', sep='', end='')
# print('d', 'e', 'f', sep='', end='')

# # Примечание 6. Если после вывода данных нужно более одного перевода строки, то можно использовать следующий код:

# print('Python', end='\n\n\n')

# # Примечание 7. Мы не можем указывать параметры sep и end перед аргументами, так как именованные параметры всегда должны следовать после позиционных аргументов.

# # Примечание 8. Параметр sep является разделителем для нескольких аргументов в команде print().
# # Если аргумент в команде print() только один, то параметру sep нечего разделять. В таком случае параметр sep никак не будет влиять на выводимый текст.

# print('Python', sep='777')

# # -----------------------------
# # Множественное присваивание
# # -----------------------------

# # В языке Python за одну инструкцию присваивания можно задавать значения сразу нескольким переменным. Делается это так:

# name, surname = 'Vadim', 'Bagrov'
# print('Имя:', name, 'Фамилия:', surname)

# # Если требуется считать текст с клавиатуры и присвоить его в качестве значения переменным, то можно написать так: 

# name, surname = input(), input()
# print('Имя:', name, ',', 'Фамилия:', surname)

# # Если слева от знака = в множественном присваивании должны стоять через запятую имена переменных, то справа могут стоять произвольные выражения, разделенные запятыми. Главное, чтобы слева и справа от знака присваивания было одинаковое число элементов.

# # Множественное присваивание удобно использовать, когда нужно обменять значения двух переменных. В Python это делается так:

# name1 = 'Vadim'
# name2 = 'Thomas'
# name1, name2 = name2, name1

# # Обратите внимание, что для обмена значений переменных следующий вариант не сработает:

# # name1 = 'Vadim'
# # name2 = 'Thomas'
# # name1 = name2
# # name2 = name1

# # Дело в том, что инструкция name1 = name2 полностью стирает старое значение переменной name1. Когда мы в инструкции name2 = name1 присваиваем для переменной name2 значение переменной name1, этим значением уже не является строка 'Timur', этим значением уже является строка 'Gvido'.

# # Примечание 1. Новое значение переменной вытесняет старое. Важно представлять, чему равно значение переменной в каждый момент времени.

# #Примечание 2. В качестве названия переменных запрещено использовать ключевые (зарезервированные) слова. К ключевым словам в языке Python относятся:

# # False;
# # True;
# # None;
# # and;
# # with;
# # as;
# # assert;
# # break;
# # class;
# # continue;
# # def;
# # del;
# # elif;
# # else;
# # except;
# # finally;
# # try;
# # for;
# # from;
# # global;
# # if;
# # import;
# # in;
# # is;
# # lambda;
# # nonlocal;
# # not;
# # or;
# # pass;
# # raise;
# # return;
# # while;
# # yield.


# # -----------------------------
# # PEP 8
# # -----------------------------

# # При оформлении программ мы будем пользоваться PEP 8 — Python Enhancement Proposal. Этот документ предлагает единый и общепринятый стиль написания программ на языке Python. Документ создан по рекомендациям Гвидо Ван Россума, автора Python. Прочесть его на русском языке можно по https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html


# # Рекомендация 1. Избегайте использования пробелов перед открывающей скобкой, после которой начинается список аргументов функции.

# #Правильно:
# #print('Follow PEP8!')

# #Неправильно:
# #print ('Follow PEP8!')


# # Рекомендация 2. После запятой нужен пробел.

# # Правильно:
# # print('PEP8', 'Rocks!')

# # Неправильно:
# # print('PEP8','Rocks!')


# # Рекомендация 3. Не отделяйте пробелами знак «равно», когда он употребляется для обозначения значения параметра по умолчанию.

# # Правильно:
# # print('My name', 'is', 'Python', sep='**', end='+')

# # Неправильно:
# # print('My name', 'is', 'Python', sep = '**', end = '+')


# # Это ОДНОСТРОЧНЫЙ комментарий в программе на языке Python.

# print('Python rocks!')  # Это комментарий в программе на языке Python.

# # Примечание 1. Согласно стандарту PEP 8, комментарии должны отделяться хотя бы двумя пробелами от кода. Они должны начинаться с символа # и одного пробела.

# # Правильно:
# # print('Comments in Python')  # Печать текста с помощью команды print.

# # Неправильно:
# # print('Comments in Python')#Печать текста с помощью команды print.