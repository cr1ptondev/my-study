# # ---------------------------------------------------------------
# # Обучение на Python курс "Поколение Python": курс для начинающих
# # ---------------------------------------------------------------


# # ---------------------------------------------------------------
# # Тема урока: Строковый тип данных
# # ---------------------------------------------------------------

# Строковый тип данных, как и числовой, очень часто используется в программировании. В Python строковый тип данных имеет название str (сокращение от string — строка, струна, ряд).

# Для создания строковой переменной (литерала), мы должны заключить необходимый текст в кавычки. В Python можно использовать как одинарные кавычки, так и двойные:

s1 = 'Python rocks!'
s2 = "Python rocks!"
# Напомним, что по умолчанию, команда input() считывает именно строку текста:

s = input()  # переменная s имеет строковый тип str
# Для задания пустой строки, мы используем две кавычки одинакового типа:

s1 = ''   # пустая строка
s2 = ' '  # строка состоящая из одного символа пробела
# Не стоит путать пустую строку и строку состоящую из одного символа пробела. Это абсолютно разные строки.


# # ---------------------------------------------------------------
# # Длина строки
# # ---------------------------------------------------------------

# Длиной строки называется количество символов из которых она состоит. Чтобы посчитать длину строки используем встроенную функцию len() (от слова length – длина).

s1 = 'abcdef'
length1 = len(s1)               # считаем длину строки из переменной s1
length2 = len('Python rocks!')  # считаем длину строкового литерала
print(length1) #6
print(length2) #13


# # ---------------------------------------------------------------
# # Преобразование чисел в строку
# # ---------------------------------------------------------------

# Для преобразования строки к числу мы использовали функции int() и float(). Для обратного преобразования, то есть из числа в строку мы используем функцию str():

num1 = 1777    # целое число
num2 = 17.77   # число с плавающей точкой
s1 = str(num1) # преобразовали целое число в строку '1777'
s2 = str(num2) # преобразовали число с плавающей точкой в строку '17.77'

# Иногда работать со строками намного проще, чем с числами. Даже если в условии задачи сказано, что дается число, нам ничто не мешает работать с ним как со строкой.


# # ---------------------------------------------------------------
# # Конкатенация строк
# # ---------------------------------------------------------------

# Строки, как и числа, можно складывать. Операция сложения строк называется конкатенацией или сцеплением.

s1 = 'ab' + 'bc'
s2 = 'bc' + 'ab'
s3 = s1 + s2 + '!!'
print(s1) # abbc
print(s2) # bcab
print(s3) # abbcbcab!!

# Операция сложения строк в отличие от операции сложения чисел не является коммутативной, то есть, от перестановки мест слагаемых-строк результат меняется!

# С помощью конкатенации строк можно эмулировать вывод данных, который раньше мы делали используя необязательные параметры sep и end. Следующие две строки кода делают одно и то же:

print('a', 'b', 'c', sep='*', end='!')    # a*b*c!
print()  # переход на новую строку
print('a' + '*' + 'b' + '*' + 'c' + '!')  # a*b*c!


# # ---------------------------------------------------------------
# # Примечания
# # ---------------------------------------------------------------

# Примечание 1. Тройные кавычки в Python используются для многострочного (multiline) текста. Например,

text = '''Python is an interpreted, high-level, general-purpose programming language.
Created by Guido van Rossum and first released in 1991, Python design 
philosophy emphasizes code readability with its notable use of significant whitespace.'''


# Примечание 2. На первый взгляд может показаться странным, что можно использовать как одинарные, так и двойные кавычки, однако такой подход позволяет очень легко добавлять в строку нужные кавычки:

s1 = 'Мы можем использовать в одиночных кавычках двойные кавычки "Война и мир"'
s2 = "Мы можем использовать в двойных кавычках одиночные кавычки 'Война и мир'"
print(s1) # Мы можем использовать в одиночных кавычках двойные кавычки "Война и мир"
print(s2) # Мы можем использовать в двойных кавычках одиночные кавычки 'Война и мир'


# # ---------------------------------------------------------------
# # Оператор in
# # ---------------------------------------------------------------

# В Python есть специальный оператор in, который позволяет проверить, что одна строка находится внутри другой.

s = 'https://pygen.ru/'
if 'a' in s:
    print('Введенная строка содержит символ а')
else:
    print('Введенная строка не содержит символ а')

# проверяет, содержится ли в переменной s символ 'a', и выводит:

# Введенная строка не содержит символ а


# # ---------------------------------------------------------------
# # Использование вместе с логическими операторами
# # ---------------------------------------------------------------

# Мы можем использовать оператор in вместе с логическим оператором not, например:

s = input()
if '.' not in s:
    print('Введенная строка не содержит символа точки')
# С помощью оператора in мы можем упростить следующий код, проверяющий, что значение переменной s равно одному из пяти символов 'a', 'e', 'i', 'o', 'u':

if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u':
    print('YES')

# до вида:

if len(s) == 1 and s in 'aeiou':
    print('YES')
# С помощью оператора in мы можем проверять наличие сразу нескольких символов в строке.


s = 'Sigma'
print('a' in s) # True
print('z' in s) # False


# # ---------------------------------------------------------------
# # Точное вхождение
# # ---------------------------------------------------------------

# Оператор in проверяет, содержится ли одна строка в другой строке как точная последовательность символов. В обеих строках символы должны находиться в том же порядке друг относительно друга и не должны быть разделены другими символами, чтобы выражение с оператором in вернуло значение True.

print('ab' in 'abc') # True
print('ac' in 'abc') # False

# Во втором случае выводится False, потому что строка 'abc' не содержит последовательности символов 'ac' (символы 'a' и 'с' идут не подряд, они разделены символом 'b').


# # ---------------------------------------------------------------
# # Чувствительность к регистру
# # ---------------------------------------------------------------

# Проверка с использованием оператора in чувствительна к регистру.

s = 'Alpha'
print('p' in s) # True
print('P' in s) # False

# Примечание. Если строка s1 содержится в строке s2, то говорят, что строка s1 является подстрокой для строки s2. Другими словами, оператор in определяет, является ли одна строка подстрокой для другой строки.