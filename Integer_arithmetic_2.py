# ---------------------------------------------------------------
# Обучение на Python курс "Поколение Python": курс для начинающих
# ---------------------------------------------------------------


# ---------------------------------------------------------------
# Целочисленная арифметика. Часть 2
# ---------------------------------------------------------------


# ---------------------------------------------------------------
# Возведение в степень
# ---------------------------------------------------------------

# Для возведения числа в степень используется оператор **.

print(2 ** 0)
print(2 ** 1)
print(2 ** 2)
print(2 ** 3)
print(2 ** (-1))

# Обратите внимание: оператор возведения в степень (**) может возводить не только в положительную степень, но и в отрицательную. Аналогично, основание степени a также может быть числом отрицательным.

print(2**(-2))
print((-3)**3)

# Обратите внимание: оператор возведения в степень (**) является правоассоциативным (значение выражения вычисляется справа налево) в соответствии с правилами математики. Таким образом, выражение x ** y ** z вычисляется как x ** (y ** z).

print(2 ** 2 ** 3)     # 2 ** (2 ** 3) = 2 ** 8


# ---------------------------------------------------------------
# Целочисленное деление
# ---------------------------------------------------------------

# Для положительных чисел оператор целочисленного деления (//) ведёт себя как обычное деление, за исключением того, что он отбрасывает десятичную часть результата.

print(10 // 3)
print(10 // 4)
print(10 // 5)
print(10 // 6)
print(10 // 12)

# При делении отрицательных чисел необходимо помнить, что результат целочисленного деления не превосходит частное. Другими словами, округление всегда берётся в меньшую сторону.

print(10 // 3)  #  3 Округление в большую сторону
print(-10 // 3) # -4 Округление в меньшую сторону


# ---------------------------------------------------------------
# Деление с остатком
# ---------------------------------------------------------------

# Оператор деления с остатком (%) возвращает остаток от деления двух целых чисел. Рассмотрим работу данного оператора на примерах.

print(10 % 3)
print(10 % 4)
print(10 % 5)
print(10 % 6)
print(10 % 12)
print(10 % 20)

# при нахождении остатка от деления на целое число n n может получаться результат 0 , 1 , 2 , … n − 1 0,1,2,…n −1. Например, при делении на 2 2 возможны остатки 0 , 1 0,1, при делении на 3 3 возможны остатки 0 , 1 , 2 0,1,2 и т.д.


# Примечание 1. Оператор нахождения остатка очень полезен при решении многих задач. Например, число делится на n нацело тогда и только тогда, когда остаток от деления на n равен 0.

# Примечание 2. Таблица приоритетов арифметических операторов в Python приведена ниже (чем ниже расположен оператор в таблице, тем ниже его приоритет).

# Оператор
# ()	Скобки
# **	Возведение в степень
# - (унарный минус)	Унарный минус
# *, /, //, %	Умножение, деление, целочисленное деление, остаток от деления
# +, -	Сложение, вычитание
# Как видно из таблицы, операторы умножения (*) и все операторы деления (/, //, %) имеют равные приоритеты. А у оператора возведения в степень (**) приоритет выше, чем у любого другого арифметического оператора, кроме скобок (()).

# Примечание 3. Полезно прочитать про модулярную арифметику в математике.

# Примечание 4. Обратите внимание: при 0 < n < m результатом деления n % m является число n, а результатом деления n // m является число 0.

print(5 % 9)
print(3 % 13)
print(5 // 9)
print(3 // 13)